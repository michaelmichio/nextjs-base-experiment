@media (prefers-color-scheme: dark) {
  html[theme-mode="system"] {
    .light-hide {
      display: none !important;
    }
    @include theme-color-hue(
      $eui-theme-colors,
      $eui-theme-colors-mode,
      (
        "dark": (),
        "white": (),
      ),
      (
        "dark": (),
        "black": (),
      ),
      $color-hue-lighten-dark,
      $color-hue-darken-dark
    );
  }
}

@media (prefers-color-scheme: light) {
  html[theme-mode="system"] {
    .dark-hide {
      display: none !important;
    }

    @include theme-color-hue(
      $eui-theme-colors,
      $eui-theme-colors-mode,
      (
        "light": (),
        "white": (),
      ),
      (
        "light": (),
        "black": (),
      ),
      $color-hue-lighten-light,
      $color-hue-darken-light
    );
  }
}

html[theme-mode="light"] {
  .dark-hide {
    display: none !important;
  }

  @include theme-color-hue(
    $eui-theme-colors,
    $eui-theme-colors-mode,
    (
      "light": (),
      "white": (),
    ),
    (
      "light": (),
      "black": (),
    ),
    $color-hue-lighten-light,
    $color-hue-darken-light
  );
}

html[theme-mode="dark"] {
  .light-hide {
    display: none !important;
  }

  @include theme-color-hue(
    $eui-theme-colors,
    $eui-theme-colors-mode,
    (
      "dark": (),
      "white": (),
    ),
    (
      "dark": (),
      "black": (),
    ),
    $color-hue-lighten-dark,
    $color-hue-darken-dark
  );
}

@each $size-key, $value in $eui-theme-font-sizing {
  html[theme-fontsize="#{$size-key}"],
  html[theme-fontsize="#{$size-key}"] body {
    font-size: #{$value};
  }

  .fs-#{$size-key} {
    font-size: #{$value};
  }
}

@each $mode-key, $mode-value in $eui-theme-colors-mode {
  $color-mode-light: map-get($mode-value, "light");
  $color-mode-dark: map-get($mode-value, "dark");

  $color-mode-light-white: map-get($color-mode-light, "white");
  $color-mode-light-black: map-get($color-mode-light, "black");
  $color-mode-dark-white: map-get($color-mode-dark, "white");
  $color-mode-dark-black: map-get($color-mode-dark, "black");

  @media (prefers-color-scheme: dark) {
    html[theme-mode="system"] body[theme-color="#{$mode-key}"] {
      --white: #{$color-mode-dark-white};
      --black: #{$color-mode-dark-black};
      @include theme-mode-dark($color-mode-dark-white, $black-hue-dark);
    }
  }

  @media (prefers-color-scheme: light) {
    html[theme-mode="system"] body[theme-color="#{$mode-key}"] {
      --white: #{$color-mode-light-white};
      --black: #{$color-mode-light-black};
      @include theme-mode-light($color-mode-light-black, $black-hue-light);
    }
  }

  html[theme-mode="light"] body[theme-color="#{$mode-key}"] {
    --white: #{$color-mode-light-white};
    --black: #{$color-mode-light-black};
    @include theme-mode-light($color-mode-light-black, $black-hue-light);
  }

  html[theme-mode="dark"] body[theme-color="#{$mode-key}"] {
    --white: #{$color-mode-dark-white};
    --black: #{$color-mode-dark-black};
    @include theme-mode-dark($color-mode-dark-white, $black-hue-dark);
  }
}

@each $theme-group, $theme-value in $eui-theme-shape {
  html[theme="#{$theme-group}"] {
    @each $shape-group, $shape-value in $theme-value {
      body[theme-shape="#{$shape-group}"] {
        @each $shape-key, $value in $shape-value {
          --#{$shape-key}: #{$value};
        }
      }
    }
  }
}

@each $theme-group, $theme-value in $eui-theme-component {
  html[theme="#{$theme-group}"] body {
    @each $component-key, $value in $theme-value {
      --#{$component-key}: #{$value};
    }
  }
  :root {
    @each $key, $value in $eui-theme-spacers {
      --eui-space-#{$key}: #{$value};
      .border-radius-#{$key} {
        border-radius: #{$value} !important;
      }
    }
  }
}
