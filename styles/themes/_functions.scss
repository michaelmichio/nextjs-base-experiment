@use "sass:math";

/**
 * Converts HEX color to RGB channels.
 * @param {Color} $hex - A hex color (e.g. #ffffff)
 * @param {Boolean} $as-string - Whether to return as comma-separated string
 * @return {List|String} RGB components
 */
@function hexToRGB($hex, $as-string: false) {
  @if type-of($hex) != "color" {
    @warn "hexToRGB() expects a color value, got: #{$hex}";
    @return 0, 0, 0;
  }

  $r: red($hex);
  $g: green($hex);
  $b: blue($hex);

  @if $as-string {
    @return "#{$r}, #{$g}, #{$b}";
  } @else {
    @return $r, $g, $b;
  }
}

/**
 * Chooses the best contrast color (white/black) for given background.
 * Uses luminance algorithm based on WCAG 2.0 standards.
 * @param {Color} $color - Background color
 * @param {Color} $white - Light color (default: white)
 * @param {Color} $black - Dark color (default: black)
 * @return {Color} The better contrast color
 */
@function colorContrast($color, $white: white, $black: black) {
  $brightness: math.div(
    (red($color) * 299 + green($color) * 587 + blue($color) * 114),
    1000
  );

  $white-brightness: math.div(
    (red($white) * 299 + green($white) * 587 + blue($white) * 114),
    1000
  );

  @return if($brightness < math.div($white-brightness, 2), $white, $black);
}

@function index-to-key($map, $index) {
  $keys: map-keys($map);
  @return nth($keys, $index);
}

@function resolve-mix-color($theme-colors-mode, $mix, $color-group) {
  $mode-group: map-get($theme-colors-mode, $color-group);
  @if $mode-group == null {
    @warn "Color group `#{$color-group}` not found in theme-colors-mode.";
    @return null;
  }
  $mode-key: index-to-key($mix, 1);
  $color-key: index-to-key($mix, 2);

  @return map-get(map-get($mode-group, $mode-key), $color-key);
}
