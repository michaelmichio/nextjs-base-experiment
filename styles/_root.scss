// SYSTEM MODE (dark)
@media (prefers-color-scheme: dark) {
  @include apply-theme-mode(
    "system",
    (
      "dark": (),
      "white": (),
    ),
    (
      "dark": (),
      "black": (),
    ),
    $color-hue-lighten-dark,
    $color-hue-darken-dark,
    "light"
  );
}

// SYSTEM MODE (light)
@media (prefers-color-scheme: light) {
  @include apply-theme-mode(
    "system",
    (
      "light": (),
      "white": (),
    ),
    (
      "light": (),
      "black": (),
    ),
    $color-hue-lighten-light,
    $color-hue-darken-light,
    "dark"
  );
}

// LIGHT MODE
@include apply-theme-mode(
  "light",
  (
    "light": (),
    "white": (),
  ),
  (
    "light": (),
    "black": (),
  ),
  $color-hue-lighten-light,
  $color-hue-darken-light,
  "dark"
);

// DARK MODE
@include apply-theme-mode(
  "dark",
  (
    "dark": (),
    "white": (),
  ),
  (
    "dark": (),
    "black": (),
  ),
  $color-hue-lighten-dark,
  $color-hue-darken-dark,
  "light"
);

// Color mode per theme
@each $mode-key, $mode-value in $eui-theme-colors-mode {
  $color-mode-light: map-get($mode-value, "light");
  $color-mode-dark: map-get($mode-value, "dark");

  @if $color-mode-light != null and $color-mode-dark != null {
    $color-mode-light-white: map-get($color-mode-light, "white");
    $color-mode-light-black: map-get($color-mode-light, "black");
    $color-mode-dark-white: map-get($color-mode-dark, "white");
    $color-mode-dark-black: map-get($color-mode-dark, "black");

    // SYSTEM DARK
    @media (prefers-color-scheme: dark) {
      html[theme-mode="system"] body[theme-color="#{$mode-key}"] {
        --white: #{$color-mode-dark-white};
        --black: #{$color-mode-dark-black};
        @include theme-mode-dark($color-mode-dark-white, $black-hue-dark);

      }
    }

    // SYSTEM LIGHT
    @media (prefers-color-scheme: light) {
      html[theme-mode="system"] body[theme-color="#{$mode-key}"] {
        --white: #{$color-mode-light-white};
        --black: #{$color-mode-light-black};
        @include theme-mode-light($color-mode-light-black, $black-hue-light);
      }
    }

    // EXPLICIT LIGHT
    html[theme-mode="light"] body[theme-color="#{$mode-key}"] {
      --white: #{$color-mode-light-white};
      --black: #{$color-mode-light-black};
      @include theme-mode-light($color-mode-light-black, $black-hue-light);
    }

    // EXPLICIT DARK
    html[theme-mode="dark"] body[theme-color="#{$mode-key}"] {
      --white: #{$color-mode-dark-white};
      --black: #{$color-mode-dark-black};
      @include theme-mode-dark($color-mode-dark-white, $black-hue-dark);

    }
  }
}

// // Font size utility
// @each $size-key, $value in $eui-theme-font-sizing {
//   html[theme-fontsize="#{$size-key}"] {
//     font-size: #{$value};

//     body {
//       font-size: inherit;
//     }
//   }

//   .fs-#{$size-key} {
//     font-size: #{$value};
//   }
// }

// // THEME SHAPE (border radius dsb)
// @each $theme-group, $theme-value in $eui-theme-shape {
//   html[theme="#{$theme-group}"] {
//     @each $shape-group, $shape-value in $theme-value {
//       body[theme-shape="#{$shape-group}"] {
//         @each $shape-key, $value in $shape-value {
//           --#{$shape-key}: #{$value};
//         }
//       }
//     }
//   }
// }

// // THEME COMPONENT VARIABLE (padding, margin, dsb)
// @each $theme-group, $theme-value in $eui-theme-component {
//   html[theme="#{$theme-group}"] body {
//     @each $component-key, $value in $theme-value {
//       --#{$component-key}: #{$value};
//     }
//   }
// }

// // GLOBAL SPACERS & UTILITY CLASS
// :root {
//   @each $key, $value in $eui-theme-spacers {
//     --eui-space-#{$key}: #{$value};

//     .border-radius-#{$key} {
//       border-radius: #{$value} !important;
//     }
//   }
// }
